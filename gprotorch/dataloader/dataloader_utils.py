"""
A script containing utilities for the different data loader classes.
"""

import sys
from prody import *
import pandas as pd
from rdkit import Chem
from rdkit.Chem import AllChem
from io import StringIO
import requests

# functions adapted from Pat Walters (https://gist.github.com/PatWalters/3c0a483c030a2c75cb22c4234f206973)
# that split a PDB entry into a .pdb file of the protein and a .sdf file of the ligand(s)


def read_ligand_expo():
    """
    Read PDB Ligand Expo data, try to find a file called
    Components-smiles-stereo-oe.smi in the current directory.
    If you can't find the file, grab it from the RCSB

    Returns: Ligand Expo as a dictionary with ligand id as the key

    """

    file_name = "Components-smiles-stereo-oe.smi"

    # read file if it already exists
    try:
        df = pd.read_csv(file_name, sep="\t",
                         header=None,
                         names=["SMILES", "ID", "Name"])

    # otherwise download it and read it in afterwards
    except FileNotFoundError:
        url = f"http://ligand-expo.rcsb.org/dictionaries/{file_name}"
        r = requests.get(url, allow_redirects=True)
        open('Components-smiles-stereo-oe.smi', 'wb').write(r.content)
        df = pd.read_csv(file_name, sep="\t",
                         header=None,
                         names=["SMILES", "ID", "Name"])
    df.set_index("ID", inplace=True)

    return df.to_dict()


def get_pdb_components(pdb_id):
    """
    Split a protein-ligand pdb into protein and ligand components

    Args:
        pdb_id: 4-letter pdb code

    Returns: tuple of ProDy Selections for proteins and ligands

    """

    pdb = parsePDB(pdb_id)
    protein = pdb.select('protein')
    ligand = pdb.select('not protein and not water')
    return protein, ligand


def process_ligand(ligand, res_name, expo_dict):
    """
    Add bond orders to a pdb ligand through the following process
    1. Select the ligand component with name "res_name"
    2. Get the corresponding SMILES from the Ligand Expo dictionary
    3. Create a template molecule from the SMILES in step 2
    4. Write the PDB file to a stream
    5. Read the stream into an RDKit molecule
    6. Assign the bond orders from the template from step 3

    Args:
        ligand: ligand as generated by prody
        res_name: residue name of ligand to extract
        expo_dict: dictionary with LigandExpo

    Returns: molecule with bond orders assigned

    """

    output = StringIO()

    # select res_name residue
    sub_mol = ligand.select(f"resname {res_name}")

    # extract corresponding SMILES and read it into rdkit
    sub_smiles = expo_dict['SMILES'][res_name]
    template = AllChem.MolFromSmiles(sub_smiles)

    # stream selected ligand
    writePDBStream(output, sub_mol)
    pdb_string = output.getvalue()

    # add bond orders
    rd_mol = AllChem.MolFromPDBBlock(pdb_string)
    new_mol = AllChem.AssignBondOrdersFromTemplate(template, rd_mol)

    return new_mol


def write_pdb(protein, pdb_name):
    """
    Write a prody protein to a pdb file.

    Args:
        protein: protein object from prody
        pdb_name: base name for the pdb file

    Returns: None

    """

    output_pdb_name = f"{pdb_name}_protein.pdb"
    writePDB(f"{output_pdb_name}", protein)
    print(f"wrote {output_pdb_name}")


def write_sdf(new_mol, pdb_name, res_name):
    """
    Write an RDKit molecule to an SD file.

    Args:
        new_mol: the molecule to write to a file
        pdb_name: the PDB entry from which it was extracted
        res_name: its residue identifier in the PDB entry

    Returns: None

    """
    outfile_name = f"{pdb_name}_{res_name}_ligand.sdf"
    writer = Chem.SDWriter(f"{outfile_name}")
    writer.write(new_mol)
    print(f"wrote {outfile_name}")